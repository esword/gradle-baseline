/*
 * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.palantir.baseline.tasks;

import com.palantir.baseline.plugins.BaselineExactDependencies;
import com.palantir.baseline.tasks.dependencies.DependencyReportTask;
import com.palantir.baseline.tasks.dependencies.DependencyUtils;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.gradle.api.DefaultTask;
import org.gradle.api.GradleException;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ModuleVersionIdentifier;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.provider.ListProperty;
import org.gradle.api.provider.Provider;
import org.gradle.api.provider.SetProperty;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputFile;
import org.gradle.api.tasks.TaskAction;

public class CheckUnusedDependenciesTaskv2 extends DefaultTask {

    private final ListProperty<Configuration> sourceOnlyConfigurations;
    private final RegularFileProperty report;
    private final SetProperty<String> ignored;

    public CheckUnusedDependenciesTaskv2() {
        setGroup("Verification");
        setDescription("Ensures no extraneous dependencies are declared");
        sourceOnlyConfigurations = getProject().getObjects().listProperty(Configuration.class);
        sourceOnlyConfigurations.convention(Collections.emptyList());

        report = getProject().getObjects().fileProperty();

        ignored = getProject().getObjects().setProperty(String.class);
        //ignored.set(Collections.emptySet());
    }

    @TaskAction
    public final void checkUnusedDependencies() {
        DependencyReportTask.ReportContent reportContent =
                DependencyUtils.getReportContent(getReportFile().getAsFile().get());

        if (reportContent.getUnusedDependencies().isEmpty()) {
            return;
        }

        List<String> declaredButUnused = reportContent.getUnusedDependencies().stream()
                .filter(artifact -> !shouldIgnore(artifact))
                .collect(Collectors.toList());

        // TODO(esword): verifying if this will work with report set.  test still fails
        //excludeSourceOnlyDependencies();

        getLogger().debug("Possibly unused dependencies: {}", declaredButUnused);
        if (!declaredButUnused.isEmpty()) {
            // TODO(dfox): don't print warnings for jars that define service loaded classes (e.g. meta-inf)
            StringBuilder sb = new StringBuilder();
            sb.append(String.format("Found %s dependencies unused during compilation, please delete them from '%s' or "
                    + "choose one of the suggested fixes:\n", declaredButUnused.size(), buildFile()));
            for (String resolvedArtifact : declaredButUnused) {
                sb.append('\t').append(resolvedArtifact).append('\n');

                // Suggest fixes from the implicit list
                List<String> didYouMean = reportContent.getImplicitDependencies();

                if (!didYouMean.isEmpty()) {
                    sb.append("\t\tDid you mean:\n");
                    didYouMean.stream()
                            .map(s -> "\t\t\t" + DependencyUtils.getSuggestionString(s))
                            .forEach(transitive -> sb.append(transitive).append("\n"));
                }
            }
            throw new GradleException(sb.toString());
        }
    }

    /**
     * Excludes compileOnly and annotationProcessor dependencies as they would be incorrectly flagged as unused by
     * this task due to BaselineExactDependencies use of
     * {@link org.apache.maven.shared.dependency.analyzer.asm.ASMDependencyAnalyzer} which only looks at the
     * dependencies of the generated byte-code, not the union of compile + runtime dependencies.
     */
    private void excludeSourceOnlyDependencies() {
        sourceOnlyConfigurations.get().forEach(config ->
                config.getResolvedConfiguration().getFirstLevelModuleDependencies().forEach(dependency -> {
                    ignoreDependency(config, dependency.getModule().getId());
                    dependency.getModuleArtifacts().forEach(artifact ->
                            ignoreDependency(config, artifact.getModuleVersion().getId()));
                }));
    }

    private void ignoreDependency(Configuration config, ModuleVersionIdentifier id) {
        String dependencyId = BaselineExactDependencies.asString(id);
        getLogger().info("Ignoring {} dependency: '{}'", config.getName(), dependencyId);
        ignored.add(dependencyId);
    }

    private Path buildFile() {
        return getProject().getRootDir().toPath().relativize(getProject().getBuildFile().toPath());
    }

    private boolean shouldIgnore(String artifact) {
        return ignored.get().contains(artifact);
    }

    @Input
    public final Provider<List<Configuration>> getSourceOnlyConfigurations() {
        return sourceOnlyConfigurations;
    }

    public final void sourceOnlyConfiguration(Configuration configuration) {
        this.sourceOnlyConfigurations.add(Objects.requireNonNull(configuration));
    }

    /**
     * Dependency report location.
     */
    @InputFile
    public RegularFileProperty getReportFile() {
        return report;
    }

    @Input
    @org.gradle.api.tasks.Optional
    public final SetProperty<String> getIgnored() {
        return ignored;
    }
}
